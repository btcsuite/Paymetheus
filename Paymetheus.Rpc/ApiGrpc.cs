// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Walletrpc {
  public static class VersionService
  {
    static readonly string __ServiceName = "walletrpc.VersionService";

    static readonly Marshaller<global::Walletrpc.VersionRequest> __Marshaller_VersionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.VersionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.VersionResponse> __Marshaller_VersionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.VersionResponse.Parser.ParseFrom);

    static readonly Method<global::Walletrpc.VersionRequest, global::Walletrpc.VersionResponse> __Method_Version = new Method<global::Walletrpc.VersionRequest, global::Walletrpc.VersionResponse>(
        MethodType.Unary,
        __ServiceName,
        "Version",
        __Marshaller_VersionRequest,
        __Marshaller_VersionResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Walletrpc.ApiReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IVersionServiceClient
    {
      global::Walletrpc.VersionResponse Version(global::Walletrpc.VersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.VersionResponse Version(global::Walletrpc.VersionRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.VersionResponse> VersionAsync(global::Walletrpc.VersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.VersionResponse> VersionAsync(global::Walletrpc.VersionRequest request, CallOptions options);
    }

    // server-side interface
    public interface IVersionService
    {
      Task<global::Walletrpc.VersionResponse> Version(global::Walletrpc.VersionRequest request, ServerCallContext context);
    }

    // client stub
    public class VersionServiceClient : ClientBase, IVersionServiceClient
    {
      public VersionServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Walletrpc.VersionResponse Version(global::Walletrpc.VersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Version, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.VersionResponse Version(global::Walletrpc.VersionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Version, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.VersionResponse> VersionAsync(global::Walletrpc.VersionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Version, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.VersionResponse> VersionAsync(global::Walletrpc.VersionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Version, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IVersionService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Version, serviceImpl.Version).Build();
    }

    // creates a new client
    public static VersionServiceClient NewClient(Channel channel)
    {
      return new VersionServiceClient(channel);
    }

  }
  public static class WalletService
  {
    static readonly string __ServiceName = "walletrpc.WalletService";

    static readonly Marshaller<global::Walletrpc.PingRequest> __Marshaller_PingRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.PingRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.PingResponse> __Marshaller_PingResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.PingResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NetworkRequest> __Marshaller_NetworkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NetworkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NetworkResponse> __Marshaller_NetworkResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NetworkResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountNumberRequest> __Marshaller_AccountNumberRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountNumberRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountNumberResponse> __Marshaller_AccountNumberResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountNumberResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountsRequest> __Marshaller_AccountsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountsResponse> __Marshaller_AccountsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.BalanceRequest> __Marshaller_BalanceRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.BalanceRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.BalanceResponse> __Marshaller_BalanceResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.BalanceResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.GetTransactionsRequest> __Marshaller_GetTransactionsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.GetTransactionsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.GetTransactionsResponse> __Marshaller_GetTransactionsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.GetTransactionsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.TransactionNotificationsRequest> __Marshaller_TransactionNotificationsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.TransactionNotificationsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.TransactionNotificationsResponse> __Marshaller_TransactionNotificationsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.TransactionNotificationsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.SpentnessNotificationsRequest> __Marshaller_SpentnessNotificationsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.SpentnessNotificationsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.SpentnessNotificationsResponse> __Marshaller_SpentnessNotificationsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.SpentnessNotificationsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountNotificationsRequest> __Marshaller_AccountNotificationsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountNotificationsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.AccountNotificationsResponse> __Marshaller_AccountNotificationsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.AccountNotificationsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.ChangePassphraseRequest> __Marshaller_ChangePassphraseRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.ChangePassphraseRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.ChangePassphraseResponse> __Marshaller_ChangePassphraseResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.ChangePassphraseResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.RenameAccountRequest> __Marshaller_RenameAccountRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.RenameAccountRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.RenameAccountResponse> __Marshaller_RenameAccountResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.RenameAccountResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NextAccountRequest> __Marshaller_NextAccountRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NextAccountRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NextAccountResponse> __Marshaller_NextAccountResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NextAccountResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NextAddressRequest> __Marshaller_NextAddressRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NextAddressRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.NextAddressResponse> __Marshaller_NextAddressResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.NextAddressResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.ImportPrivateKeyRequest> __Marshaller_ImportPrivateKeyRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.ImportPrivateKeyRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.ImportPrivateKeyResponse> __Marshaller_ImportPrivateKeyResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.ImportPrivateKeyResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.FundTransactionRequest> __Marshaller_FundTransactionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.FundTransactionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.FundTransactionResponse> __Marshaller_FundTransactionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.FundTransactionResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.SignTransactionRequest> __Marshaller_SignTransactionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.SignTransactionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.SignTransactionResponse> __Marshaller_SignTransactionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.SignTransactionResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.PublishTransactionRequest> __Marshaller_PublishTransactionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.PublishTransactionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.PublishTransactionResponse> __Marshaller_PublishTransactionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.PublishTransactionResponse.Parser.ParseFrom);

    static readonly Method<global::Walletrpc.PingRequest, global::Walletrpc.PingResponse> __Method_Ping = new Method<global::Walletrpc.PingRequest, global::Walletrpc.PingResponse>(
        MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_PingRequest,
        __Marshaller_PingResponse);

    static readonly Method<global::Walletrpc.NetworkRequest, global::Walletrpc.NetworkResponse> __Method_Network = new Method<global::Walletrpc.NetworkRequest, global::Walletrpc.NetworkResponse>(
        MethodType.Unary,
        __ServiceName,
        "Network",
        __Marshaller_NetworkRequest,
        __Marshaller_NetworkResponse);

    static readonly Method<global::Walletrpc.AccountNumberRequest, global::Walletrpc.AccountNumberResponse> __Method_AccountNumber = new Method<global::Walletrpc.AccountNumberRequest, global::Walletrpc.AccountNumberResponse>(
        MethodType.Unary,
        __ServiceName,
        "AccountNumber",
        __Marshaller_AccountNumberRequest,
        __Marshaller_AccountNumberResponse);

    static readonly Method<global::Walletrpc.AccountsRequest, global::Walletrpc.AccountsResponse> __Method_Accounts = new Method<global::Walletrpc.AccountsRequest, global::Walletrpc.AccountsResponse>(
        MethodType.Unary,
        __ServiceName,
        "Accounts",
        __Marshaller_AccountsRequest,
        __Marshaller_AccountsResponse);

    static readonly Method<global::Walletrpc.BalanceRequest, global::Walletrpc.BalanceResponse> __Method_Balance = new Method<global::Walletrpc.BalanceRequest, global::Walletrpc.BalanceResponse>(
        MethodType.Unary,
        __ServiceName,
        "Balance",
        __Marshaller_BalanceRequest,
        __Marshaller_BalanceResponse);

    static readonly Method<global::Walletrpc.GetTransactionsRequest, global::Walletrpc.GetTransactionsResponse> __Method_GetTransactions = new Method<global::Walletrpc.GetTransactionsRequest, global::Walletrpc.GetTransactionsResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetTransactions",
        __Marshaller_GetTransactionsRequest,
        __Marshaller_GetTransactionsResponse);

    static readonly Method<global::Walletrpc.TransactionNotificationsRequest, global::Walletrpc.TransactionNotificationsResponse> __Method_TransactionNotifications = new Method<global::Walletrpc.TransactionNotificationsRequest, global::Walletrpc.TransactionNotificationsResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "TransactionNotifications",
        __Marshaller_TransactionNotificationsRequest,
        __Marshaller_TransactionNotificationsResponse);

    static readonly Method<global::Walletrpc.SpentnessNotificationsRequest, global::Walletrpc.SpentnessNotificationsResponse> __Method_SpentnessNotifications = new Method<global::Walletrpc.SpentnessNotificationsRequest, global::Walletrpc.SpentnessNotificationsResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "SpentnessNotifications",
        __Marshaller_SpentnessNotificationsRequest,
        __Marshaller_SpentnessNotificationsResponse);

    static readonly Method<global::Walletrpc.AccountNotificationsRequest, global::Walletrpc.AccountNotificationsResponse> __Method_AccountNotifications = new Method<global::Walletrpc.AccountNotificationsRequest, global::Walletrpc.AccountNotificationsResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "AccountNotifications",
        __Marshaller_AccountNotificationsRequest,
        __Marshaller_AccountNotificationsResponse);

    static readonly Method<global::Walletrpc.ChangePassphraseRequest, global::Walletrpc.ChangePassphraseResponse> __Method_ChangePassphrase = new Method<global::Walletrpc.ChangePassphraseRequest, global::Walletrpc.ChangePassphraseResponse>(
        MethodType.Unary,
        __ServiceName,
        "ChangePassphrase",
        __Marshaller_ChangePassphraseRequest,
        __Marshaller_ChangePassphraseResponse);

    static readonly Method<global::Walletrpc.RenameAccountRequest, global::Walletrpc.RenameAccountResponse> __Method_RenameAccount = new Method<global::Walletrpc.RenameAccountRequest, global::Walletrpc.RenameAccountResponse>(
        MethodType.Unary,
        __ServiceName,
        "RenameAccount",
        __Marshaller_RenameAccountRequest,
        __Marshaller_RenameAccountResponse);

    static readonly Method<global::Walletrpc.NextAccountRequest, global::Walletrpc.NextAccountResponse> __Method_NextAccount = new Method<global::Walletrpc.NextAccountRequest, global::Walletrpc.NextAccountResponse>(
        MethodType.Unary,
        __ServiceName,
        "NextAccount",
        __Marshaller_NextAccountRequest,
        __Marshaller_NextAccountResponse);

    static readonly Method<global::Walletrpc.NextAddressRequest, global::Walletrpc.NextAddressResponse> __Method_NextAddress = new Method<global::Walletrpc.NextAddressRequest, global::Walletrpc.NextAddressResponse>(
        MethodType.Unary,
        __ServiceName,
        "NextAddress",
        __Marshaller_NextAddressRequest,
        __Marshaller_NextAddressResponse);

    static readonly Method<global::Walletrpc.ImportPrivateKeyRequest, global::Walletrpc.ImportPrivateKeyResponse> __Method_ImportPrivateKey = new Method<global::Walletrpc.ImportPrivateKeyRequest, global::Walletrpc.ImportPrivateKeyResponse>(
        MethodType.Unary,
        __ServiceName,
        "ImportPrivateKey",
        __Marshaller_ImportPrivateKeyRequest,
        __Marshaller_ImportPrivateKeyResponse);

    static readonly Method<global::Walletrpc.FundTransactionRequest, global::Walletrpc.FundTransactionResponse> __Method_FundTransaction = new Method<global::Walletrpc.FundTransactionRequest, global::Walletrpc.FundTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "FundTransaction",
        __Marshaller_FundTransactionRequest,
        __Marshaller_FundTransactionResponse);

    static readonly Method<global::Walletrpc.SignTransactionRequest, global::Walletrpc.SignTransactionResponse> __Method_SignTransaction = new Method<global::Walletrpc.SignTransactionRequest, global::Walletrpc.SignTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "SignTransaction",
        __Marshaller_SignTransactionRequest,
        __Marshaller_SignTransactionResponse);

    static readonly Method<global::Walletrpc.PublishTransactionRequest, global::Walletrpc.PublishTransactionResponse> __Method_PublishTransaction = new Method<global::Walletrpc.PublishTransactionRequest, global::Walletrpc.PublishTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "PublishTransaction",
        __Marshaller_PublishTransactionRequest,
        __Marshaller_PublishTransactionResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Walletrpc.ApiReflection.Descriptor.Services[1]; }
    }

    // client interface
    public interface IWalletServiceClient
    {
      global::Walletrpc.PingResponse Ping(global::Walletrpc.PingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.PingResponse Ping(global::Walletrpc.PingRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.PingResponse> PingAsync(global::Walletrpc.PingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.PingResponse> PingAsync(global::Walletrpc.PingRequest request, CallOptions options);
      global::Walletrpc.NetworkResponse Network(global::Walletrpc.NetworkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.NetworkResponse Network(global::Walletrpc.NetworkRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.NetworkResponse> NetworkAsync(global::Walletrpc.NetworkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.NetworkResponse> NetworkAsync(global::Walletrpc.NetworkRequest request, CallOptions options);
      global::Walletrpc.AccountNumberResponse AccountNumber(global::Walletrpc.AccountNumberRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.AccountNumberResponse AccountNumber(global::Walletrpc.AccountNumberRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.AccountNumberResponse> AccountNumberAsync(global::Walletrpc.AccountNumberRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.AccountNumberResponse> AccountNumberAsync(global::Walletrpc.AccountNumberRequest request, CallOptions options);
      global::Walletrpc.AccountsResponse Accounts(global::Walletrpc.AccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.AccountsResponse Accounts(global::Walletrpc.AccountsRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.AccountsResponse> AccountsAsync(global::Walletrpc.AccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.AccountsResponse> AccountsAsync(global::Walletrpc.AccountsRequest request, CallOptions options);
      global::Walletrpc.BalanceResponse Balance(global::Walletrpc.BalanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.BalanceResponse Balance(global::Walletrpc.BalanceRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.BalanceResponse> BalanceAsync(global::Walletrpc.BalanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.BalanceResponse> BalanceAsync(global::Walletrpc.BalanceRequest request, CallOptions options);
      global::Walletrpc.GetTransactionsResponse GetTransactions(global::Walletrpc.GetTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.GetTransactionsResponse GetTransactions(global::Walletrpc.GetTransactionsRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.GetTransactionsResponse> GetTransactionsAsync(global::Walletrpc.GetTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.GetTransactionsResponse> GetTransactionsAsync(global::Walletrpc.GetTransactionsRequest request, CallOptions options);
      AsyncServerStreamingCall<global::Walletrpc.TransactionNotificationsResponse> TransactionNotifications(global::Walletrpc.TransactionNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Walletrpc.TransactionNotificationsResponse> TransactionNotifications(global::Walletrpc.TransactionNotificationsRequest request, CallOptions options);
      AsyncServerStreamingCall<global::Walletrpc.SpentnessNotificationsResponse> SpentnessNotifications(global::Walletrpc.SpentnessNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Walletrpc.SpentnessNotificationsResponse> SpentnessNotifications(global::Walletrpc.SpentnessNotificationsRequest request, CallOptions options);
      AsyncServerStreamingCall<global::Walletrpc.AccountNotificationsResponse> AccountNotifications(global::Walletrpc.AccountNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncServerStreamingCall<global::Walletrpc.AccountNotificationsResponse> AccountNotifications(global::Walletrpc.AccountNotificationsRequest request, CallOptions options);
      global::Walletrpc.ChangePassphraseResponse ChangePassphrase(global::Walletrpc.ChangePassphraseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.ChangePassphraseResponse ChangePassphrase(global::Walletrpc.ChangePassphraseRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.ChangePassphraseResponse> ChangePassphraseAsync(global::Walletrpc.ChangePassphraseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.ChangePassphraseResponse> ChangePassphraseAsync(global::Walletrpc.ChangePassphraseRequest request, CallOptions options);
      global::Walletrpc.RenameAccountResponse RenameAccount(global::Walletrpc.RenameAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.RenameAccountResponse RenameAccount(global::Walletrpc.RenameAccountRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.RenameAccountResponse> RenameAccountAsync(global::Walletrpc.RenameAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.RenameAccountResponse> RenameAccountAsync(global::Walletrpc.RenameAccountRequest request, CallOptions options);
      global::Walletrpc.NextAccountResponse NextAccount(global::Walletrpc.NextAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.NextAccountResponse NextAccount(global::Walletrpc.NextAccountRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.NextAccountResponse> NextAccountAsync(global::Walletrpc.NextAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.NextAccountResponse> NextAccountAsync(global::Walletrpc.NextAccountRequest request, CallOptions options);
      global::Walletrpc.NextAddressResponse NextAddress(global::Walletrpc.NextAddressRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.NextAddressResponse NextAddress(global::Walletrpc.NextAddressRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.NextAddressResponse> NextAddressAsync(global::Walletrpc.NextAddressRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.NextAddressResponse> NextAddressAsync(global::Walletrpc.NextAddressRequest request, CallOptions options);
      global::Walletrpc.ImportPrivateKeyResponse ImportPrivateKey(global::Walletrpc.ImportPrivateKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.ImportPrivateKeyResponse ImportPrivateKey(global::Walletrpc.ImportPrivateKeyRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.ImportPrivateKeyResponse> ImportPrivateKeyAsync(global::Walletrpc.ImportPrivateKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.ImportPrivateKeyResponse> ImportPrivateKeyAsync(global::Walletrpc.ImportPrivateKeyRequest request, CallOptions options);
      global::Walletrpc.FundTransactionResponse FundTransaction(global::Walletrpc.FundTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.FundTransactionResponse FundTransaction(global::Walletrpc.FundTransactionRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.FundTransactionResponse> FundTransactionAsync(global::Walletrpc.FundTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.FundTransactionResponse> FundTransactionAsync(global::Walletrpc.FundTransactionRequest request, CallOptions options);
      global::Walletrpc.SignTransactionResponse SignTransaction(global::Walletrpc.SignTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.SignTransactionResponse SignTransaction(global::Walletrpc.SignTransactionRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.SignTransactionResponse> SignTransactionAsync(global::Walletrpc.SignTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.SignTransactionResponse> SignTransactionAsync(global::Walletrpc.SignTransactionRequest request, CallOptions options);
      global::Walletrpc.PublishTransactionResponse PublishTransaction(global::Walletrpc.PublishTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.PublishTransactionResponse PublishTransaction(global::Walletrpc.PublishTransactionRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.PublishTransactionResponse> PublishTransactionAsync(global::Walletrpc.PublishTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.PublishTransactionResponse> PublishTransactionAsync(global::Walletrpc.PublishTransactionRequest request, CallOptions options);
    }

    // server-side interface
    public interface IWalletService
    {
      Task<global::Walletrpc.PingResponse> Ping(global::Walletrpc.PingRequest request, ServerCallContext context);
      Task<global::Walletrpc.NetworkResponse> Network(global::Walletrpc.NetworkRequest request, ServerCallContext context);
      Task<global::Walletrpc.AccountNumberResponse> AccountNumber(global::Walletrpc.AccountNumberRequest request, ServerCallContext context);
      Task<global::Walletrpc.AccountsResponse> Accounts(global::Walletrpc.AccountsRequest request, ServerCallContext context);
      Task<global::Walletrpc.BalanceResponse> Balance(global::Walletrpc.BalanceRequest request, ServerCallContext context);
      Task<global::Walletrpc.GetTransactionsResponse> GetTransactions(global::Walletrpc.GetTransactionsRequest request, ServerCallContext context);
      Task TransactionNotifications(global::Walletrpc.TransactionNotificationsRequest request, IServerStreamWriter<global::Walletrpc.TransactionNotificationsResponse> responseStream, ServerCallContext context);
      Task SpentnessNotifications(global::Walletrpc.SpentnessNotificationsRequest request, IServerStreamWriter<global::Walletrpc.SpentnessNotificationsResponse> responseStream, ServerCallContext context);
      Task AccountNotifications(global::Walletrpc.AccountNotificationsRequest request, IServerStreamWriter<global::Walletrpc.AccountNotificationsResponse> responseStream, ServerCallContext context);
      Task<global::Walletrpc.ChangePassphraseResponse> ChangePassphrase(global::Walletrpc.ChangePassphraseRequest request, ServerCallContext context);
      Task<global::Walletrpc.RenameAccountResponse> RenameAccount(global::Walletrpc.RenameAccountRequest request, ServerCallContext context);
      Task<global::Walletrpc.NextAccountResponse> NextAccount(global::Walletrpc.NextAccountRequest request, ServerCallContext context);
      Task<global::Walletrpc.NextAddressResponse> NextAddress(global::Walletrpc.NextAddressRequest request, ServerCallContext context);
      Task<global::Walletrpc.ImportPrivateKeyResponse> ImportPrivateKey(global::Walletrpc.ImportPrivateKeyRequest request, ServerCallContext context);
      Task<global::Walletrpc.FundTransactionResponse> FundTransaction(global::Walletrpc.FundTransactionRequest request, ServerCallContext context);
      Task<global::Walletrpc.SignTransactionResponse> SignTransaction(global::Walletrpc.SignTransactionRequest request, ServerCallContext context);
      Task<global::Walletrpc.PublishTransactionResponse> PublishTransaction(global::Walletrpc.PublishTransactionRequest request, ServerCallContext context);
    }

    // client stub
    public class WalletServiceClient : ClientBase, IWalletServiceClient
    {
      public WalletServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Walletrpc.PingResponse Ping(global::Walletrpc.PingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Ping, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.PingResponse Ping(global::Walletrpc.PingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Ping, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.PingResponse> PingAsync(global::Walletrpc.PingRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Ping, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.PingResponse> PingAsync(global::Walletrpc.PingRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Ping, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.NetworkResponse Network(global::Walletrpc.NetworkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Network, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.NetworkResponse Network(global::Walletrpc.NetworkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Network, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NetworkResponse> NetworkAsync(global::Walletrpc.NetworkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Network, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NetworkResponse> NetworkAsync(global::Walletrpc.NetworkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Network, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.AccountNumberResponse AccountNumber(global::Walletrpc.AccountNumberRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccountNumber, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.AccountNumberResponse AccountNumber(global::Walletrpc.AccountNumberRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_AccountNumber, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.AccountNumberResponse> AccountNumberAsync(global::Walletrpc.AccountNumberRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccountNumber, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.AccountNumberResponse> AccountNumberAsync(global::Walletrpc.AccountNumberRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_AccountNumber, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.AccountsResponse Accounts(global::Walletrpc.AccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Accounts, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.AccountsResponse Accounts(global::Walletrpc.AccountsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Accounts, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.AccountsResponse> AccountsAsync(global::Walletrpc.AccountsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Accounts, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.AccountsResponse> AccountsAsync(global::Walletrpc.AccountsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Accounts, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.BalanceResponse Balance(global::Walletrpc.BalanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Balance, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.BalanceResponse Balance(global::Walletrpc.BalanceRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Balance, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.BalanceResponse> BalanceAsync(global::Walletrpc.BalanceRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Balance, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.BalanceResponse> BalanceAsync(global::Walletrpc.BalanceRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Balance, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.GetTransactionsResponse GetTransactions(global::Walletrpc.GetTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetTransactions, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.GetTransactionsResponse GetTransactions(global::Walletrpc.GetTransactionsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetTransactions, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.GetTransactionsResponse> GetTransactionsAsync(global::Walletrpc.GetTransactionsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetTransactions, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.GetTransactionsResponse> GetTransactionsAsync(global::Walletrpc.GetTransactionsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetTransactions, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.TransactionNotificationsResponse> TransactionNotifications(global::Walletrpc.TransactionNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_TransactionNotifications, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.TransactionNotificationsResponse> TransactionNotifications(global::Walletrpc.TransactionNotificationsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_TransactionNotifications, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.SpentnessNotificationsResponse> SpentnessNotifications(global::Walletrpc.SpentnessNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SpentnessNotifications, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.SpentnessNotificationsResponse> SpentnessNotifications(global::Walletrpc.SpentnessNotificationsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_SpentnessNotifications, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.AccountNotificationsResponse> AccountNotifications(global::Walletrpc.AccountNotificationsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AccountNotifications, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public AsyncServerStreamingCall<global::Walletrpc.AccountNotificationsResponse> AccountNotifications(global::Walletrpc.AccountNotificationsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_AccountNotifications, options);
        return Calls.AsyncServerStreamingCall(call, request);
      }
      public global::Walletrpc.ChangePassphraseResponse ChangePassphrase(global::Walletrpc.ChangePassphraseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ChangePassphrase, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.ChangePassphraseResponse ChangePassphrase(global::Walletrpc.ChangePassphraseRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ChangePassphrase, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.ChangePassphraseResponse> ChangePassphraseAsync(global::Walletrpc.ChangePassphraseRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ChangePassphrase, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.ChangePassphraseResponse> ChangePassphraseAsync(global::Walletrpc.ChangePassphraseRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ChangePassphrase, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.RenameAccountResponse RenameAccount(global::Walletrpc.RenameAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RenameAccount, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.RenameAccountResponse RenameAccount(global::Walletrpc.RenameAccountRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RenameAccount, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.RenameAccountResponse> RenameAccountAsync(global::Walletrpc.RenameAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RenameAccount, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.RenameAccountResponse> RenameAccountAsync(global::Walletrpc.RenameAccountRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RenameAccount, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.NextAccountResponse NextAccount(global::Walletrpc.NextAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_NextAccount, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.NextAccountResponse NextAccount(global::Walletrpc.NextAccountRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_NextAccount, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NextAccountResponse> NextAccountAsync(global::Walletrpc.NextAccountRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_NextAccount, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NextAccountResponse> NextAccountAsync(global::Walletrpc.NextAccountRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_NextAccount, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.NextAddressResponse NextAddress(global::Walletrpc.NextAddressRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_NextAddress, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.NextAddressResponse NextAddress(global::Walletrpc.NextAddressRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_NextAddress, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NextAddressResponse> NextAddressAsync(global::Walletrpc.NextAddressRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_NextAddress, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.NextAddressResponse> NextAddressAsync(global::Walletrpc.NextAddressRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_NextAddress, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.ImportPrivateKeyResponse ImportPrivateKey(global::Walletrpc.ImportPrivateKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ImportPrivateKey, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.ImportPrivateKeyResponse ImportPrivateKey(global::Walletrpc.ImportPrivateKeyRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ImportPrivateKey, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.ImportPrivateKeyResponse> ImportPrivateKeyAsync(global::Walletrpc.ImportPrivateKeyRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ImportPrivateKey, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.ImportPrivateKeyResponse> ImportPrivateKeyAsync(global::Walletrpc.ImportPrivateKeyRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ImportPrivateKey, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.FundTransactionResponse FundTransaction(global::Walletrpc.FundTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_FundTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.FundTransactionResponse FundTransaction(global::Walletrpc.FundTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_FundTransaction, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.FundTransactionResponse> FundTransactionAsync(global::Walletrpc.FundTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_FundTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.FundTransactionResponse> FundTransactionAsync(global::Walletrpc.FundTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_FundTransaction, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.SignTransactionResponse SignTransaction(global::Walletrpc.SignTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SignTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.SignTransactionResponse SignTransaction(global::Walletrpc.SignTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_SignTransaction, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.SignTransactionResponse> SignTransactionAsync(global::Walletrpc.SignTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_SignTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.SignTransactionResponse> SignTransactionAsync(global::Walletrpc.SignTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_SignTransaction, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.PublishTransactionResponse PublishTransaction(global::Walletrpc.PublishTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PublishTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.PublishTransactionResponse PublishTransaction(global::Walletrpc.PublishTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_PublishTransaction, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.PublishTransactionResponse> PublishTransactionAsync(global::Walletrpc.PublishTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_PublishTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.PublishTransactionResponse> PublishTransactionAsync(global::Walletrpc.PublishTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_PublishTransaction, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IWalletService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_Network, serviceImpl.Network)
          .AddMethod(__Method_AccountNumber, serviceImpl.AccountNumber)
          .AddMethod(__Method_Accounts, serviceImpl.Accounts)
          .AddMethod(__Method_Balance, serviceImpl.Balance)
          .AddMethod(__Method_GetTransactions, serviceImpl.GetTransactions)
          .AddMethod(__Method_TransactionNotifications, serviceImpl.TransactionNotifications)
          .AddMethod(__Method_SpentnessNotifications, serviceImpl.SpentnessNotifications)
          .AddMethod(__Method_AccountNotifications, serviceImpl.AccountNotifications)
          .AddMethod(__Method_ChangePassphrase, serviceImpl.ChangePassphrase)
          .AddMethod(__Method_RenameAccount, serviceImpl.RenameAccount)
          .AddMethod(__Method_NextAccount, serviceImpl.NextAccount)
          .AddMethod(__Method_NextAddress, serviceImpl.NextAddress)
          .AddMethod(__Method_ImportPrivateKey, serviceImpl.ImportPrivateKey)
          .AddMethod(__Method_FundTransaction, serviceImpl.FundTransaction)
          .AddMethod(__Method_SignTransaction, serviceImpl.SignTransaction)
          .AddMethod(__Method_PublishTransaction, serviceImpl.PublishTransaction).Build();
    }

    // creates a new client
    public static WalletServiceClient NewClient(Channel channel)
    {
      return new WalletServiceClient(channel);
    }

  }
  public static class WalletLoaderService
  {
    static readonly string __ServiceName = "walletrpc.WalletLoaderService";

    static readonly Marshaller<global::Walletrpc.WalletExistsRequest> __Marshaller_WalletExistsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.WalletExistsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.WalletExistsResponse> __Marshaller_WalletExistsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.WalletExistsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.CreateWalletRequest> __Marshaller_CreateWalletRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.CreateWalletRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.CreateWalletResponse> __Marshaller_CreateWalletResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.CreateWalletResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.OpenWalletRequest> __Marshaller_OpenWalletRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.OpenWalletRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.OpenWalletResponse> __Marshaller_OpenWalletResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.OpenWalletResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.CloseWalletRequest> __Marshaller_CloseWalletRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.CloseWalletRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.CloseWalletResponse> __Marshaller_CloseWalletResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.CloseWalletResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.StartConcensusRpcRequest> __Marshaller_StartConcensusRpcRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.StartConcensusRpcRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Walletrpc.StartConcensusRpcResponse> __Marshaller_StartConcensusRpcResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Walletrpc.StartConcensusRpcResponse.Parser.ParseFrom);

    static readonly Method<global::Walletrpc.WalletExistsRequest, global::Walletrpc.WalletExistsResponse> __Method_WalletExists = new Method<global::Walletrpc.WalletExistsRequest, global::Walletrpc.WalletExistsResponse>(
        MethodType.Unary,
        __ServiceName,
        "WalletExists",
        __Marshaller_WalletExistsRequest,
        __Marshaller_WalletExistsResponse);

    static readonly Method<global::Walletrpc.CreateWalletRequest, global::Walletrpc.CreateWalletResponse> __Method_CreateWallet = new Method<global::Walletrpc.CreateWalletRequest, global::Walletrpc.CreateWalletResponse>(
        MethodType.Unary,
        __ServiceName,
        "CreateWallet",
        __Marshaller_CreateWalletRequest,
        __Marshaller_CreateWalletResponse);

    static readonly Method<global::Walletrpc.OpenWalletRequest, global::Walletrpc.OpenWalletResponse> __Method_OpenWallet = new Method<global::Walletrpc.OpenWalletRequest, global::Walletrpc.OpenWalletResponse>(
        MethodType.Unary,
        __ServiceName,
        "OpenWallet",
        __Marshaller_OpenWalletRequest,
        __Marshaller_OpenWalletResponse);

    static readonly Method<global::Walletrpc.CloseWalletRequest, global::Walletrpc.CloseWalletResponse> __Method_CloseWallet = new Method<global::Walletrpc.CloseWalletRequest, global::Walletrpc.CloseWalletResponse>(
        MethodType.Unary,
        __ServiceName,
        "CloseWallet",
        __Marshaller_CloseWalletRequest,
        __Marshaller_CloseWalletResponse);

    static readonly Method<global::Walletrpc.StartConcensusRpcRequest, global::Walletrpc.StartConcensusRpcResponse> __Method_StartConcensusRpc = new Method<global::Walletrpc.StartConcensusRpcRequest, global::Walletrpc.StartConcensusRpcResponse>(
        MethodType.Unary,
        __ServiceName,
        "StartConcensusRpc",
        __Marshaller_StartConcensusRpcRequest,
        __Marshaller_StartConcensusRpcResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Walletrpc.ApiReflection.Descriptor.Services[2]; }
    }

    // client interface
    public interface IWalletLoaderServiceClient
    {
      global::Walletrpc.WalletExistsResponse WalletExists(global::Walletrpc.WalletExistsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.WalletExistsResponse WalletExists(global::Walletrpc.WalletExistsRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.WalletExistsResponse> WalletExistsAsync(global::Walletrpc.WalletExistsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.WalletExistsResponse> WalletExistsAsync(global::Walletrpc.WalletExistsRequest request, CallOptions options);
      global::Walletrpc.CreateWalletResponse CreateWallet(global::Walletrpc.CreateWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.CreateWalletResponse CreateWallet(global::Walletrpc.CreateWalletRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.CreateWalletResponse> CreateWalletAsync(global::Walletrpc.CreateWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.CreateWalletResponse> CreateWalletAsync(global::Walletrpc.CreateWalletRequest request, CallOptions options);
      global::Walletrpc.OpenWalletResponse OpenWallet(global::Walletrpc.OpenWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.OpenWalletResponse OpenWallet(global::Walletrpc.OpenWalletRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.OpenWalletResponse> OpenWalletAsync(global::Walletrpc.OpenWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.OpenWalletResponse> OpenWalletAsync(global::Walletrpc.OpenWalletRequest request, CallOptions options);
      global::Walletrpc.CloseWalletResponse CloseWallet(global::Walletrpc.CloseWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.CloseWalletResponse CloseWallet(global::Walletrpc.CloseWalletRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.CloseWalletResponse> CloseWalletAsync(global::Walletrpc.CloseWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.CloseWalletResponse> CloseWalletAsync(global::Walletrpc.CloseWalletRequest request, CallOptions options);
      global::Walletrpc.StartConcensusRpcResponse StartConcensusRpc(global::Walletrpc.StartConcensusRpcRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Walletrpc.StartConcensusRpcResponse StartConcensusRpc(global::Walletrpc.StartConcensusRpcRequest request, CallOptions options);
      AsyncUnaryCall<global::Walletrpc.StartConcensusRpcResponse> StartConcensusRpcAsync(global::Walletrpc.StartConcensusRpcRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Walletrpc.StartConcensusRpcResponse> StartConcensusRpcAsync(global::Walletrpc.StartConcensusRpcRequest request, CallOptions options);
    }

    // server-side interface
    public interface IWalletLoaderService
    {
      Task<global::Walletrpc.WalletExistsResponse> WalletExists(global::Walletrpc.WalletExistsRequest request, ServerCallContext context);
      Task<global::Walletrpc.CreateWalletResponse> CreateWallet(global::Walletrpc.CreateWalletRequest request, ServerCallContext context);
      Task<global::Walletrpc.OpenWalletResponse> OpenWallet(global::Walletrpc.OpenWalletRequest request, ServerCallContext context);
      Task<global::Walletrpc.CloseWalletResponse> CloseWallet(global::Walletrpc.CloseWalletRequest request, ServerCallContext context);
      Task<global::Walletrpc.StartConcensusRpcResponse> StartConcensusRpc(global::Walletrpc.StartConcensusRpcRequest request, ServerCallContext context);
    }

    // client stub
    public class WalletLoaderServiceClient : ClientBase, IWalletLoaderServiceClient
    {
      public WalletLoaderServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Walletrpc.WalletExistsResponse WalletExists(global::Walletrpc.WalletExistsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_WalletExists, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.WalletExistsResponse WalletExists(global::Walletrpc.WalletExistsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_WalletExists, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.WalletExistsResponse> WalletExistsAsync(global::Walletrpc.WalletExistsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_WalletExists, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.WalletExistsResponse> WalletExistsAsync(global::Walletrpc.WalletExistsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_WalletExists, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.CreateWalletResponse CreateWallet(global::Walletrpc.CreateWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.CreateWalletResponse CreateWallet(global::Walletrpc.CreateWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateWallet, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.CreateWalletResponse> CreateWalletAsync(global::Walletrpc.CreateWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.CreateWalletResponse> CreateWalletAsync(global::Walletrpc.CreateWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateWallet, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.OpenWalletResponse OpenWallet(global::Walletrpc.OpenWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_OpenWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.OpenWalletResponse OpenWallet(global::Walletrpc.OpenWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_OpenWallet, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.OpenWalletResponse> OpenWalletAsync(global::Walletrpc.OpenWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_OpenWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.OpenWalletResponse> OpenWalletAsync(global::Walletrpc.OpenWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_OpenWallet, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.CloseWalletResponse CloseWallet(global::Walletrpc.CloseWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CloseWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.CloseWalletResponse CloseWallet(global::Walletrpc.CloseWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CloseWallet, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.CloseWalletResponse> CloseWalletAsync(global::Walletrpc.CloseWalletRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CloseWallet, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.CloseWalletResponse> CloseWalletAsync(global::Walletrpc.CloseWalletRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CloseWallet, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Walletrpc.StartConcensusRpcResponse StartConcensusRpc(global::Walletrpc.StartConcensusRpcRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_StartConcensusRpc, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Walletrpc.StartConcensusRpcResponse StartConcensusRpc(global::Walletrpc.StartConcensusRpcRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_StartConcensusRpc, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.StartConcensusRpcResponse> StartConcensusRpcAsync(global::Walletrpc.StartConcensusRpcRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_StartConcensusRpc, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Walletrpc.StartConcensusRpcResponse> StartConcensusRpcAsync(global::Walletrpc.StartConcensusRpcRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_StartConcensusRpc, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IWalletLoaderService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_WalletExists, serviceImpl.WalletExists)
          .AddMethod(__Method_CreateWallet, serviceImpl.CreateWallet)
          .AddMethod(__Method_OpenWallet, serviceImpl.OpenWallet)
          .AddMethod(__Method_CloseWallet, serviceImpl.CloseWallet)
          .AddMethod(__Method_StartConcensusRpc, serviceImpl.StartConcensusRpc).Build();
    }

    // creates a new client
    public static WalletLoaderServiceClient NewClient(Channel channel)
    {
      return new WalletLoaderServiceClient(channel);
    }

  }
}
#endregion
