<UserControl x:Class="Paymetheus.CreateOrImportSeedView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Paymetheus"
             xmlns:vc="clr-namespace:Paymetheus.Framework.ValueConverters"
             mc:Ignorable="d" 
	         Background="{DynamicResource ColorDarkBlueFull}" 
             d:DesignWidth="842" d:DesignHeight="718">
    <UserControl.Resources>
        <vc:BooleanToVisibilityConverter x:Key="b2v" False="Hidden"/>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true"/>
                            <Trigger Property="IsKeyboardFocused" Value="true"/>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="700">
        <Grid.RowDefinitions>
            <RowDefinition Height="120"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Image Grid.Row="0" Source="Images/paymetheus - 262x37.png" Stretch="Uniform" Height="37"/>

        <Border Grid.Row="1" BorderThickness="0 0 0 1" BorderBrush="#FF69D5F7" Width="340" Padding="0 0 0 15">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.Resources>
                    <Style TargetType="{x:Type RadioButton}">
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="GroupName" Value="group"/>
                    </Style>
                </Grid.Resources>
                <RadioButton Grid.Column="0" HorizontalAlignment="Left" Content="Create new wallet" Name="CreateWallet" IsChecked="{Binding CreateChecked}" Style="{DynamicResource RadioButtonStyle}"/>
                <RadioButton Grid.Column="1" HorizontalAlignment="Right" Content="Recover wallet from seed" Name="ImportWallet"  IsChecked="{Binding ImportChecked}" Style="{DynamicResource RadioButtonStyle}"/>
            </Grid>
        </Border>

        <Grid Grid.Row="2"
              Visibility="{Binding IsChecked, ElementName=CreateWallet, Converter={StaticResource b2v}}">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="0" Text="Create a new wallet" FontSize="22" Foreground="White"/>
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="20"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Column="0" TextWrapping="Wrap" Foreground="#FFB7D1F0">
                    Wallets are determinstically generated by a wallet seed.
                    The seed is a master key to your wallet and entire wallet can be recreated any time using it.
                    If the wallet encryption passphrase is forgotten or the wallet is destroyed, the seed can be used to recover the wallet.
                    <LineBreak/>
                    Write down the following seed and save it in a secure location.
                    <LineBreak/>
                    <LineBreak/>
                    <Run Text="The next prompt will require entering this seed to confirm it has been saved." Foreground="#FF69D5F7"/>
                </TextBlock>
                <TextBlock Grid.Column="2" TextWrapping="Wrap" Foreground="#FFB7D1F0">
                    To help avoid permanent loss of your wallet, the seed must be backed up before continuing.
                    <LineBreak/>
                    <LineBreak/>
                    <Run Foreground="#FFFD714B" FontWeight="Bold" Text="Warning:"/>
                    Failure to keep this seed private can result in the theft of your entire wallet.
                    Under no circumstances should this seed ever be revealed to someone else.
                </TextBlock>
            </Grid>

            <Border Grid.Row="2" CornerRadius="5" Background="#FFF4F4F5" Padding="20">
                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap"
                           Text="{Binding Bip0032SeedWordList}"
                           Foreground="{DynamicResource ColorDarkBlueFull}" FontSize="16"/>
            </Border>
            <Button Grid.Row="3" Content="CONTINUE" Command="{Binding ContinueCommand}" HorizontalAlignment="Center" Style="{DynamicResource ButtonBlue}" Foreground="#FF132F4B"/>
        </Grid>

        <Grid Grid.Row="2"
              Visibility="{Binding IsChecked, ElementName=ImportWallet, Converter={StaticResource b2v}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0" HorizontalAlignment="Left" Text="Recover from seed" FontSize="22" Foreground="White"/>
            <TextBlock Grid.Row="1" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Top" Foreground="#FFB7D1F0">
                The seed from a previously-created wallet may be used to recreate the wallet with all of its addresses and keys.
                <LineBreak/>
                The seed should be formatted as a hexadecimal number (64 characters between 0-9 and A-F) or a list of mneumonic words.
            </TextBlock>
            <Border Grid.Row="2" VerticalAlignment="Center" CornerRadius="5" Background="#FFF4F4F5" Padding="5">
                <TextBox Text="{Binding ImportedSeed, Mode=TwoWay}"  BorderThickness="0" Foreground="{DynamicResource ColorDarkBlueFull}" FontSize="16" />
            </Border>
            <Button Grid.Row="3" Content="CONTINUE" Command="{Binding ContinueCommand}" HorizontalAlignment="Center" Style="{DynamicResource ButtonBlue}" Foreground="#FF132F4B"/>
        </Grid>
    </Grid>
</UserControl>
